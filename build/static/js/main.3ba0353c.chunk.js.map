{"version":3,"sources":["modules/errors/index.js","modules/errors/PageNotFound.js","modules/Root.js","modules/questions/components/NodeComponent.js","modules/questions/components/ContentQuestionComponent.js","modules/questions/components/ScoreLevelTimeComponent.js","api.js","modules/questions/actions.js","actionTypes.js","modules/questions/components/AnswerComponent.js","modules/animations/Loading.js","modules/questions/index.js","modules/userPage/index.js","modules/userPage/action.js","modules/coffee/action.js","modules/animations/Loading2.js","modules/coffee/login.js","modules/coffee/components/AdminControlComponent.js","modules/coffee/components/LogItemComponent.js","modules/coffee/index.js","routes.js","App.js","serviceWorker.js","reducers.js","modules/home/reducers.js","modules/userPage/reducer.js","modules/questions/reducer.js","modules/coffee/reducer.js","modules/coffee/loginReducer.js","store.js","index.js","modules/errors/PageNotFound.module.css","modules/animations/Loading.module.css"],"names":["errors","PageNotFound","react_default","a","createElement","react","className","styles","title","message","react_router_dom","to","React","Component","Root","renderRoutes","this","props","route","routes","NodeComponent","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onNodeClick","e","type","setState","stateValue","target","value","isEdit","state","onInputChange","charAt","length","toUpperCase","updateNode","rowIndex","colIndex","item","nextProps","_this2","breakPoin","max","Input","onBlur","onChange","autoFocus","Button","onClick","color","ContentQuestionComponent","onInputContentChange","content","Label","for","FormGroup","id","name","placeholder","ScoreLevelTimeComponent","levels","score","time","listLevels","i","push","_this$state","Form","Row","form","Col","md","map","index","key","InputGroup","InputGroupAddon","addonType","InputGroupText","api","url","axios","get","parame","post","delete","startRequest","isFetching","payload","error","receiveRequest","postCreateQuestion","dispatch","API","then","data","catch","err","AnswerComponent","answerContent","onBtnGetGameClick","document","getElementById","focus","Loading","ldsEllipsis","randomChar","require","Question","isLoading","node","numberMatrix","getMatrixBegin","matrix","row","j","getMatrixRandomChar","upper","getMatrixWithMeanWord","mean","split","curMatrix","randomX","Math","floor","random","randomY","cur","undefined","updateANote","x","y","nodeEmpty","filter","onBtnSaveClick","level","answer","_","isEmpty","alert","trim","question","window","location","reload","questions","Container","size","components_ContentQuestionComponent","components_AnswerComponent","col","components_NodeComponent","components_ScoreLevelTimeComponent","block","animations_Loading","connect","objectSpread","UserPage","users","getUser","nextContext","result","console","log","username","postCreateLogMoney","postLogin","deleteLogById","Loading2","LoginCoffee","onSubmitForm","userName","password","user_name","JSON","parse","localStorage","getItem","login","success","setItem","stringify","history","btnLogin","Alert","style","margin","src","width","modules_animations_Loading2","AdminControlComponent","subFunction","prevState","sub","addFunction","add","onCreateLogsClick","sm","Modal","isOpen","toggle","ModalHeader","ModalBody","rows","ModalFooter","LogItemComponent","getNumberFormat","number","Intl","NumberFormat","format","Toast","ToastHeader","ToastBody","caption","money","onDelete","_id","CoffeePage","describe","parseInt","onBtnLogoutClick","removeItem","onDeleteLogClick","idDelete","logs","typeUser","coffee","newLogs","adminControls","components_AdminControlComponent","offset","components_LogItemComponent","keu","component","path","exact","App","Boolean","hostname","match","combineReducers","home","arguments","action","loggerMiddleware","store","next","configureStore","initialState","createStore","rootReducer","applyMiddleware","thunk","logger","ReactDOM","render","es","src_App_0","navigator","serviceWorker","ready","registration","unregister","module","exports","ldsEllipsis1","ldsEllipsis2","ldsEllipsis3"],"mappings":"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","file":"static/js/main.3ba0353c.chunk.js","sourcesContent":["import PageNotFound from \"./PageNotFound\";\nconst errors = {\n    PageNotFound\n};\nexport default errors;","import React, {Fragment} from \"react\";\nimport styles from \"./PageNotFound.module.css\";\nimport {Link} from \"react-router-dom\";\n\nclass PageNotFound extends React.Component {\n    render() {\n        return (\n            <Fragment>\n                <h1 className={styles.title}>Page Not Found</h1>\n                <div className={styles.message}>Sorry! This page is not available.</div>\n                <Link to={\"/\"}>Back to home</Link>\n            </Fragment>\n        )\n    }\n}\n\nexport default PageNotFound","import React, {Fragment} from 'react';\nimport {renderRoutes} from \"react-router-config\";\n\nclass Root extends React.Component {\n    render() {\n        return (\n            <Fragment>\n                {renderRoutes(this.props.route.routes)}\n            </Fragment>\n        )\n    }\n}\nexport default Root","import React,{Fragment} from 'react'\nimport style from \"./../styles.css\";\nimport Button from \"reactstrap/es/Button\";\nimport Input from \"reactstrap/es/Input\";\nclass NodeComponent extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={\n            isEdit :false,\n            stateValue : \"\",\n        };\n    }\n    componentWillMount() {\n        this.setState({isEdit:false,stateValue:this.props.item});\n    }\n    componentWillReceiveProps(nextProps) {\n        this.setState({stateValue:nextProps.item})\n    }\n\n    onNodeClick = (e) =>{\n        if(e.type === \"blur\"){\n            this.setState({stateValue:e.target.value})\n        }\n        this.setState({isEdit:!this.state.isEdit});\n    };\n    onInputChange = (e) =>{\n        let value = e.target.value;\n        value = value.charAt(value.length-1);\n        this.setState({stateValue:value.toUpperCase()});\n        this.props.updateNode(value.toUpperCase(),this.props.rowIndex,this.props.colIndex);\n    };\n\n    render(){\n        let {stateValue} = this.state;\n        let breakPoin = this.props.max === this.props.colIndex+1 ? <br/>: \"\";\n        return(\n            <Fragment>\n                {\n                    this.state.isEdit ?\n                        <Input onBlur={(e)=>this.onNodeClick(e)} onChange={this.onInputChange}\n                               value = {stateValue} className={\"m-1 input-node-question text-center\" } autoFocus/>\n                       :\n                        <Button onClick={(e)=>this.onNodeClick(e)} color=\"primary\" className={\"m-1 button-node-question\"}>{stateValue}</Button>\n                }\n                {breakPoin}\n            </Fragment>\n        )\n    }\n}\nexport default NodeComponent","import React, {Fragment} from 'react'\nimport Input from \"reactstrap/es/Input\";\nimport Label from \"reactstrap/es/Label\";\nimport FormGroup from \"reactstrap/es/FormGroup\";\n\nclass ContentQuestionComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            content: \"\"\n        };\n    }\n\n    onInputContentChange = (e) => {\n        this.setState({content: e.target.value})\n    };\n\n    render() {\n        let {content} = this.state;\n        return (\n            <Fragment>\n                <div className=\"d-flex flex-column justify-content-center align-items-center\">\n                    <Label for=\"contentFill\" className=\"mr-2\"><h1>Questions</h1></Label>\n                    < div className=\"mb-2\"><h4>{content}</h4></div>\n                </div>\n                <FormGroup>\n                    <Input type=\"text\" id=\"contentFill\" value={content}\n                           onChange={this.onInputContentChange}\n                           name=\"questions\" placeholder=\"your question\"/>\n                </FormGroup>\n            </Fragment>\n        )\n    }\n}\n\nexport default ContentQuestionComponent","import React, {Fragment} from 'react'\nimport Input from \"reactstrap/es/Input\";\nimport FormGroup from \"reactstrap/es/FormGroup\";\nimport Form from \"reactstrap/es/Form\";\nimport Label from \"reactstrap/es/Label\";\nimport Row from \"reactstrap/es/Row\";\nimport {Button, Col, InputGroup, InputGroupAddon, InputGroupText} from \"reactstrap\";\n\nclass ScoreLevelTimeComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            levels: [],\n            score: \"\",\n            time: \"\",\n        };\n    }\n\n    componentWillMount() {\n        let listLevels = []\n        for (let i = 1; i <= 10; i++) {\n            listLevels.push(i);\n        }\n        this.setState({levels: listLevels});\n    }\n\n    render() {\n        let {levels, score, time} = this.state;\n        return (\n            <Fragment>\n                <Form>\n                    <Row form>\n                        <Col md={4}>\n                            <FormGroup>\n                                <Label for=\"levelFill\" className=\"mr-1\">Level</Label>\n                                <Input type=\"select\" name=\"select\" id=\"levelFill\">\n                                    {\n                                        levels.map((item, index) => {\n                                            return <option key={index}>{item}</option>\n                                        })\n                                    }\n                                </Input>\n                            </FormGroup>\n                        </Col>\n                        <Col md={4}>\n                            <FormGroup>\n                                <Label for=\"scoreFill\">Score</Label>\n                                <Input\n                                    type=\"number\"\n                                    name=\"score\"\n                                    id=\"scoreFill\"\n                                    placeholder=\"0\"\n                                />\n                            </FormGroup>\n                        </Col>\n                        <Col md={4}>\n                            <FormGroup>\n                                <Label for=\"timeFill\">Time</Label>\n                                <InputGroup>\n                                    <Input\n                                        type=\"number\"\n                                        name=\"time\"\n                                        id=\"timeFill\"\n                                        placeholder=\"0\"\n                                    />\n                                    <InputGroupAddon addonType=\"append\">\n                                        <InputGroupText>S</InputGroupText>\n                                    </InputGroupAddon>\n                                </InputGroup>\n                            </FormGroup>\n                        </Col>\n                    </Row>\n                </Form>\n\n            </Fragment>\n        )\n    }\n}\n\nexport default ScoreLevelTimeComponent","import axios from 'axios';\n\nclass API {\n    get(url){\n        return axios.get(url);\n    }\n    post(url,parame){\n        return axios.post(url,parame)\n    }\n    delete(url){\n        return axios.delete(url);\n    }\n}\nexport default new API();","import {\n    GET_QUESTION_BY_ID_COMPLETE,\n    GET_QUESTION_BY_ID_REQUEST,\n    POST_CREATE_QUESTION_COMPLETE,\n    POST_CREATE_QUESTION_REQUEST\n} from \"../../actionTypes\";\nimport API from \"../../api\";\n\nconst startRequest = (type)=>{\n    return{\n        type: type,\n        isFetching:true,\n        payload: null,\n        error: null\n    }\n};\nconst receiveRequest = (type,payload,error)=>{\n    return{\n        type: type,\n        isFetching:false,\n        payload: payload,\n        error: error\n    }\n};\n\nexport const postCreateQuestion = (payload) => dispatch => {\n    dispatch(startRequest(POST_CREATE_QUESTION_REQUEST));\n    API.post('https://egame-websocket.herokuapp.com/questions',payload)\n        .then((data)=>{dispatch(receiveRequest(POST_CREATE_QUESTION_COMPLETE,data,null))})\n        .catch(err=>{dispatch(receiveRequest(POST_CREATE_QUESTION_COMPLETE,null,err))})\n};\nexport const getQuestionsById = (id) => dispatch => {\n    dispatch(startRequest(GET_QUESTION_BY_ID_REQUEST));\n    API.get('https://egame-websocket.herokuapp.com/questions/'+id)\n        .then((data)=>{dispatch(receiveRequest(GET_QUESTION_BY_ID_COMPLETE,data,null))})\n        .catch(err=>{dispatch(receiveRequest(GET_QUESTION_BY_ID_COMPLETE,null,err))})\n};","export const HOME_REQUEST = \"HOME_REQUEST\";\nexport const HOME_COMPLETE = \"HOME_COMPLETE\";\nexport const GET_USER_REQUEST = \"GET_USER_REQUEST\";\nexport const GET_USER_COMPLETE = \"GET_USER_COMPLETE\";\nexport const POST_LOGIN_COMPLETE = \"POST_LOGIN_COMPLETE\";\nexport const POST_LOGIN_REQUEST = \"POST_LOGIN_REQUEST\";\nexport const POST_REGISTER_COMPLETE = \"POST_REGISTER_COMPLETE\";\nexport const POST_REGISTER_REQUEST = \"POST_REGISTER_REQUEST\";\nexport const POST_CREATE_QUESTION_REQUEST = \"POST_CREATE_QUESTION_REQUEST\";\nexport const POST_CREATE_QUESTION_COMPLETE = \"POST_CREATE_QUESTION_COMPLETE\";\nexport const GET_QUESTION_BY_ID_REQUEST = \"GET_QUESTION_BY_ID_REQUEST\";\nexport const GET_QUESTION_BY_ID_COMPLETE = \"GET_QUESTION_BY_ID_COMPLETE\";\nexport const GET_LOGS_MONEY_REQUEST = \"GET_LOGS_MONEY_REQUEST\";\nexport const GET_LOGS_MONEY_COMPLETE = \"GET_LOGS_MONEY_COMPLETE\";\nexport const POST_CREATE_LOG_MONEY_REQUEST = \"POST_CREATE_LOG_MONEY_REQUEST\";\nexport const POST_CREATE_LOG_MONEY_COMPLETE = \"POST_CREATE_LOG_MONEY_COMPLETE\";\nexport const DELETE_LOGS_MONEY_REQUEST = \"DELETE_LOGS_MONEY_REQUEST\";\nexport const DELETE_LOGS_MONEY_COMPLETE = \"DELETE_LOGS_MONEY_COMPLETE\";","import React, {Fragment} from 'react'\nimport FormGroup from \"reactstrap/es/FormGroup\";\nimport Input from \"reactstrap/es/Input\";\nimport Label from \"reactstrap/es/Label\";\nimport Button from \"reactstrap/es/Button\";\n\nclass AnswerComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            answerContent:\"\"\n        };\n    }\n    onInputContentChange = (e) => {\n        this.setState({answerContent: e.target.value.toUpperCase()})\n    };\n    onBtnGetGameClick = () =>{\n        if(this.state.answerContent !== \"\")\n            this.props.onBtnGetGameClick(this.state.answerContent);\n        else{\n            document.getElementById('answerFill').focus();\n        }\n    };\n\n    render() {\n        let {answerContent} = this.state;\n        return (\n            <Fragment>\n                {/*<div className=\"d-flex flex-column justify-content-center align-items-center\">*/}\n                {/*    /!*<Label for=\"answerFill\" className=\"mr-2\"><h5>Answer</h5></Label>*!/*/}\n                {/*    < div className=\"mb-2\">{answerContent}</div>*/}\n                {/*</div>*/}\n                <FormGroup>\n                    <Input type=\"text\" className=\"text-center\" id=\"answerFill\" value={answerContent}\n                           onChange={this.onInputContentChange}\n                           name=\"questions\" placeholder=\"your answer\"/>\n                </FormGroup>\n                <FormGroup className=\"text-center\">\n                    <Button onClick={this.onBtnGetGameClick}>GET GAME</Button>\n                </FormGroup>\n            </Fragment>\n        )\n    }\n}\n\nexport default AnswerComponent","import React from \"react\";\nimport styles from \"./Loading.module.css\";\nconst Loading = () => (\n    <div className=\"text-center\">\n        <div className={styles.ldsEllipsis}>\n            <div/>\n            <div/>\n            <div/>\n            <div/>\n        </div>\n    </div>\n\n);\nexport default Loading;","import React, {Fragment} from \"react\"\nimport style from \"./styles.css\"\nimport {connect} from \"react-redux\";\nimport _ from \"lodash\";\nimport Container from \"reactstrap/es/Container\";\nimport Row from \"reactstrap/es/Row\";\nimport Col from \"reactstrap/es/Col\";\nimport NodeComponent from \"./components/NodeComponent\";\nimport ContentQuestionComponent from \"./components/ContentQuestionComponent\";\nimport ScoreLevelTimeComponent from \"./components/ScoreLevelTimeComponent\";\nimport {Button} from \"reactstrap\";\nimport {postCreateQuestion} from \"./actions\";\nimport AnswerComponent from \"./components/AnswerComponent\";\nimport {GET_USER_COMPLETE, POST_CREATE_QUESTION_COMPLETE, POST_CREATE_QUESTION_REQUEST} from \"../../actionTypes\";\nimport LoadingAnimation from './../animations/Loading'\n\nvar randomChar = require('random-char');\n\nclass Question extends React.Component {\n    state = {\n        isLoading: false,\n        node: [],\n        numberMatrix: 5,\n    };\n\n    componentWillMount() {\n        let matrix = this.getMatrixBegin();\n        matrix = this.getMatrixRandomChar(matrix);\n        this.setState({node: matrix});\n    }\n\n    getMatrixBegin = () => { //create a matrix with all \"*\"\n        let matrix = [];\n        for (let i = 0; i < this.state.numberMatrix; i++) {\n            let row = [];\n            for (let j = 0; j < this.state.numberMatrix; j++) {\n                // row.push(randomChar({upper: true})); // randomChar() Take a random Anphabe character\n                row.push(\"*\");\n            }\n            matrix.push(row);\n        }\n        return matrix;\n    };\n\n    getMatrixRandomChar = (matrix) => {\n        for (let i = 0; i < this.state.numberMatrix; i++) {\n            for (let j = 0; j < this.state.numberMatrix; j++) {\n                if (matrix[i][j] === \"*\") {\n                    matrix[i][j] = randomChar({upper: true}); // randomChar() Take a random Anphabe character\n                }\n            }\n        }\n        return matrix;\n    };\n\n    getMatrixWithMeanWord = (mean) => {\n        mean = mean.split('');\n        let curMatrix = this.getMatrixBegin();\n        let randomX = Math.floor(Math.random() * curMatrix[0].length);\n        let randomY = Math.floor(Math.random() * curMatrix[0].length);\n        curMatrix[randomX][randomY] = mean[0]; // Take a random location to push a first character\n        let cur = [randomX, randomY];\n        for (let i = 1; i < mean.length; i++) {\n            cur = this.updateANote(cur[0], cur[1], curMatrix);\n            if (cur === undefined) {  // when have not way to run make a begin\n                return this.getMatrixWithMeanWord(mean);\n            }\n            curMatrix[cur[0]][cur[1]] = mean[i];\n        }\n        return curMatrix;\n    };\n\n    updateANote = (x, y, matrix) => {\n        let nodeArrow = [[x - 1, y], [x, y - 1], [x, y + 1], [x + 1, y]];\n        let nodeEmpty = nodeArrow.filter(item => {\n            try {\n                if (matrix[item[0]][item[1]] === \"*\") {\n                    return true;\n                } else return false;\n            } catch (e) {\n                return false;\n            }\n        });\n        let randomDirect = Math.floor(Math.random() * nodeEmpty.length);\n        return nodeEmpty[randomDirect];\n    };\n\n    componentWillReceiveProps(nextProps) {\n        let {question} = nextProps;\n        switch (question.type) {\n            case POST_CREATE_QUESTION_REQUEST:\n                this.setState({isLoading: true});\n                break;\n            case POST_CREATE_QUESTION_COMPLETE:\n                this.setState({isLoading: false});\n                if (question.error) {\n                    alert(\"error\");\n                } else {\n                    alert(\"save success\");\n                }\n                window.location.reload();\n                break;\n            default:\n                return;\n        }\n    }\n\n    updateNode = (value, x, y) => {\n        for (let i = 0; i < this.state.numberMatrix; i++) {\n            for (let j = 0; j < this.state.numberMatrix; j++) {\n                if (i === x && j === y) {\n                    this.state.node[i][j] = value;\n                }\n            }\n        }\n    };\n    onBtnSaveClick = () => {\n        let level = document.getElementById('levelFill').value;\n        let time = document.getElementById('timeFill').value;\n        let score = document.getElementById('scoreFill').value;\n        let content = document.getElementById('contentFill').value;\n        let answer = document.getElementById('answerFill').value;\n        if (_.isEmpty(level) || _.isEmpty(time) || _.isEmpty(score) || _.isEmpty(content) || _.isEmpty(answer) || score <= 0 || time <= 0 || level <= 0) {\n            alert(\"Error\");\n            return;\n        }\n        const {dispatch} = this.props;\n        let payload = {\n            content: content, matrix: this.state.node,\n            time: time, score: score, answer: answer.trim(), level: level\n        };\n        dispatch(postCreateQuestion(payload));\n    };\n    onBtnGetGameClick = (mean) => {\n        let matrix = this.getMatrixWithMeanWord(mean);\n        matrix = this.getMatrixRandomChar(matrix);\n        this.setState({node: matrix});\n    };\n\n    render() {\n        let {isLoading} = this.state;\n        let questions =\n            <Fragment>\n                <Container id=\"questions\">\n                    <Row className=\"flex-column justify-content-center align-items-center d-flex\">\n                        <Col md={{size: 5}}>\n                            <ContentQuestionComponent/>\n                        </Col>\n                        <Col md={3} className={\"mt-1\"}>\n                            <AnswerComponent onBtnGetGameClick={this.onBtnGetGameClick}/>\n                        </Col>\n                        <Col md={{size: 12}} className=\"flex-column justify-content-center align-items-center d-flex\">\n                            {\n                                this.state.node.map((row, rowIndex) => {\n                                    return <div>\n                                        {\n                                            row.map((col, colIndex) => {\n                                                return <NodeComponent updateNode={this.updateNode} colIndex={colIndex}\n                                                                      rowIndex={rowIndex} item={col}\n                                                                      max={this.state.numberMatrix}/>\n                                            })\n                                        }\n                                    </div>\n                                })\n                            }\n                        </Col>\n                        <Col md={{size: 5}} className=\"mt-2 mb-4\">\n                            <ScoreLevelTimeComponent/>\n                            <Button onClick={this.onBtnSaveClick} color=\"success\" size=\"lg\" block>SAVE</Button>\n                        </Col>\n                    </Row>\n                </Container>\n            </Fragment>;\n        return (isLoading ? <LoadingAnimation/> : questions)\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    question: {...state.question}\n});\n\nexport default connect(mapStateToProps)(Question)","import React, {Fragment} from \"react\";\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\"\nimport {getUser} from \"./action\";\nimport {GET_USER_COMPLETE} from \"../../actionTypes\";\n\nclass UserPage extends React.Component {\n\n    state = {\n        users:[],\n    };\n\n    componentWillMount() {\n        this.props.getUser();\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        switch (nextProps.users.type) {\n            case GET_USER_COMPLETE:\n                this.setState({users: nextProps.users.result.data});\n                console.log(nextProps.users.result.data);\n                break;\n            default:\n                return;\n        }\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <ul>\n                    {\n                        this.state.users.map(item=>{\n                            return<li>{item.username}</li>\n                        })\n                    }\n                </ul>\n            </Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    users: {...state.users}\n});\nconst mapDispatchToProps = dispatch => ({\n    getUser: () => dispatch(getUser())\n});\n\nUserPage.propTypes = {\n    getUser: PropTypes.func\n};\n\nexport default connect(mapStateToProps,mapDispatchToProps)(UserPage)","import {GET_USER_COMPLETE, GET_USER_REQUEST} from \"../../actionTypes\";\nimport API from \"../../api\";\n\nexport const getUser = () => dispatch => {\n    API.get('http://localhost:5000/users')\n        .then((data)=>{\n            dispatch({\n                type: GET_USER_COMPLETE,\n                payload: data,\n                error: null\n            })\n        })\n        .catch(err=>{\n            dispatch({\n                type: GET_USER_COMPLETE,\n                payload: null,\n                error: err\n            })\n        })\n};","import {\n    GET_LOGS_MONEY_COMPLETE,\n    GET_LOGS_MONEY_REQUEST,\n    POST_CREATE_LOG_MONEY_REQUEST,\n    POST_CREATE_LOG_MONEY_COMPLETE,\n    POST_LOGIN_REQUEST,\n    POST_LOGIN_COMPLETE, DELETE_LOGS_MONEY_REQUEST, DELETE_LOGS_MONEY_COMPLETE\n} from \"../../actionTypes\";\n\n\nimport API from \"../../api\";\n\nconst startRequest = (type)=>{\n    return{\n        type: type,\n        isFetching:true,\n        payload: null,\n        error: null\n    }\n};\nconst receiveRequest = (type,payload,error)=>{\n    return{\n        type: type,\n        isFetching:false,\n        payload: payload,\n        error: error\n    }\n};\n\nexport const getLogsMoney = (payload) => dispatch => {\n    dispatch(startRequest(GET_LOGS_MONEY_REQUEST));\n    API.get('https://egame-websocket.herokuapp.com/coffee/logs',payload)\n        .then((data)=>{dispatch(receiveRequest(GET_LOGS_MONEY_COMPLETE,data,null))})\n        .catch(err=>{dispatch(receiveRequest(GET_LOGS_MONEY_COMPLETE,null,err))})\n};\n\nexport const postCreateLogMoney = (payload) => dispatch => {\n    dispatch(startRequest(POST_CREATE_LOG_MONEY_REQUEST));\n    API.post('https://egame-websocket.herokuapp.com/coffee/logs',payload)\n        .then((data)=>{dispatch(receiveRequest(POST_CREATE_LOG_MONEY_COMPLETE,data,null))})\n        .catch(err=>{dispatch(receiveRequest(POST_CREATE_LOG_MONEY_COMPLETE,null,err))})\n};\n\nexport const postLogin = (payload) => dispatch => {\n    dispatch(startRequest(POST_LOGIN_REQUEST));\n    API.post('https://egame-websocket.herokuapp.com/coffee/login',payload)\n        .then((data)=>{dispatch(receiveRequest(POST_LOGIN_COMPLETE,data,null))})\n        .catch(err=>{dispatch(receiveRequest(POST_LOGIN_COMPLETE,null,err))})\n};\nexport const deleteLogById = (id) => dispatch => {\n    dispatch(startRequest(DELETE_LOGS_MONEY_REQUEST));\n    API.delete('https://egame-websocket.herokuapp.com/coffee/logs/'+id)\n        .then((data)=>{dispatch(receiveRequest(DELETE_LOGS_MONEY_COMPLETE,data,null))})\n        .catch(err=>{dispatch(receiveRequest(DELETE_LOGS_MONEY_COMPLETE,null,err))})\n};","import React from \"react\";\nimport \"./Loading2.css\";\nconst Loading2 = () => (\n        <div className=\"box\">\n            <span className=\"s1\"></span>\n            <span className=\"s2\"></span>\n            <span className=\"s3\"></span>\n        </div>\n);\nexport default Loading2;","import React, { Fragment } from \"react\";\nimport { InputGroup, InputGroupAddon, Input, Alert } from 'reactstrap';\nimport './styles.css';\nimport {POST_LOGIN_REQUEST,POST_LOGIN_COMPLETE} from \"../../actionTypes\";\nimport {connect} from 'react-redux';\nimport { postLogin } from \"./action\";\nimport Loading from '../animations/Loading2'\nclass LoginCoffee extends React.Component {\n    state = {\n        isLoading:false,\n        error:null\n    };\n    componentWillMount() {\n        let data = JSON.parse(localStorage.getItem('user'));\n        if(data){\n            const { dispatch } = this.props;\n            dispatch(postLogin(data));\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        switch (nextProps.login.type) {\n            case POST_LOGIN_REQUEST:\n                this.setState({ isLoading: nextProps.login.isFetching});\n                break;\n            case POST_LOGIN_COMPLETE:\n                this.setState({ isLoading: nextProps.login.isFetching});\n                if(nextProps.login.result.data.success){\n                    localStorage.setItem('user',JSON.stringify(nextProps.login.result.data.success));\n                    this.props.history.push('/coffee');\n                }\n                else{\n                    this.setState({error:\"Incorrect!!!\"});\n                }\n                break;\n            default:\n                return;\n        }\n    }\n    onSubmitForm=()=>{\n        let data={};\n        let userName=document.getElementById('inputUserName').value;\n        let password=document.getElementById('inputPassword').value;\n        data.user_name=userName;\n        data.password=password;\n        const { dispatch } = this.props;\n        dispatch(postLogin(data));\n    };\n    render() {\n        const {isLoading,error} = this.state;\n        const btnLogin=<button type=\"submit\" className=\"login-form-btn\" onClick={()=>this.onSubmitForm()}>Login</button>;\n        const alert = error === null ? '': <Alert style={{margin: '0'}} color=\"warning\">Incorrect!!!</Alert>;\n        return (\n            <Fragment>\n                <div className=\"container-login\">\n                    <div className=\"wrap-login\">\n                        {/*<span className=\"login-form-title\">Account Login</span>*/}\n\n                        <form className=\"login-form\">\n                            <img className=\"text-center\" src=\"http://www.pngmart.com/files/1/Coffee-Logo-PNG-Image.png\" width={63} />\n                            <InputGroup>\n                                <InputGroupAddon addonType=\"prepend\">\n                                    <span className=\"input-group-text\" id=\"basic-addon\">\n                                    <i className=\"fas fa-user\"></i>\n                                    </span>\n                                </InputGroupAddon>\n                                <Input placeholder=\"Username\" id=\"inputUserName\"  type=\"text\" />\n                            </InputGroup>\n                            <InputGroup>\n                                <InputGroupAddon addonType=\"prepend\">\n                                <span className=\"input-group-text\" id=\"basic-addon\">\n                                    <i className=\"fas fa-lock\"></i>\n                                </span>\n                                </InputGroupAddon>\n                                <Input placeholder=\"******\" id=\"inputPassword\" type=\"password\"/>\n                            </InputGroup>\n                            {alert}\n                            {isLoading ? <Loading/> : btnLogin}\n                        </form>\n                    </div>\n                </div>\n            </Fragment>\n        )\n    }\n}\nconst mapStateToProps = (state) => ({\n    login: { ...state.login }\n});\n\nexport default connect(mapStateToProps)(LoginCoffee)","import React, {Fragment} from 'react'\nimport {Button, Input, Label, Modal, ModalBody, ModalFooter, ModalHeader} from \"reactstrap\";\nimport Row from \"reactstrap/es/Row\";\nimport Col from \"reactstrap/es/Col\";\n\nclass AdminControlComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            add: false,\n            sub: false,\n        };\n    }\n    subFunction = () => {\n        this.setState(prevState => ({\n            sub: !prevState.sub\n        }));\n    };\n    addFunction = () => {\n        this.setState(prevState => ({\n            add: !prevState.add\n        }));\n    };\n    onCreateLogsClick = (type) => {\n        if(type === \"IN_CREATE\"){\n            this.addFunction();\n        }\n        else {\n            this.subFunction();\n        }\n        this.props.onCreateLogsClick(type)\n    };\n    render() {\n        const {add,sub} = this.state;\n        return (\n            <Fragment>\n                <Row>\n                    <Col md={6} sm={12} className=\"mb-2\">\n                        <Button color=\"success\" onClick={this.addFunction} block>+</Button>\n                    </Col>\n                    <Col md={6} sm={12} className=\"mb-2\">\n                        <Button color=\"danger\" onClick={this.subFunction} block>-</Button>\n                    </Col>\n                </Row>\n                {/* Modal */}\n                <div>\n                    <Modal isOpen={add} toggle={this.addFunction} className={this.props.className}>\n                        <ModalHeader toggle={this.addFunction}>THÊM QUỶ</ModalHeader>\n                        <ModalBody>\n                            <Label for=\"\">Mô tả</Label>\n                            <Input id=\"describeAdd\" type=\"textarea\" rows={3} />\n\n                            <Label for=\"\">Tiền</Label>\n                            <Input id=\"moneyAdd\" type=\"number\" />\n                        </ModalBody>\n\n                        <ModalFooter>\n                            <Button id=\"btnAdd\" color=\"success\"\n                                    onClick={()=>{this.onCreateLogsClick(\"IN_CREATE\")}}>+</Button>{' '}\n                        </ModalFooter>\n                    </Modal>\n                </div>\n                <div>\n                    <Modal isOpen={sub} toggle={this.subFunction} className={this.props.className}>\n                        <ModalHeader toggle={this.subFunction}>TRỪ QUỶ</ModalHeader>\n                        <ModalBody>\n                            <Label for=\"\">Mô tả</Label>\n                            <Input id=\"describeSub\" type=\"textarea\" rows={3} />\n                            <Label for=\"\">Tiền</Label>\n                            <Input id=\"moneySub\" type=\"number\" />\n                        </ModalBody>\n\n                        <ModalFooter>\n                            <Button color=\"danger\"\n                                    onClick={()=>{this.onCreateLogsClick(\"REDUCE\")}}>-</Button>{' '}\n                        </ModalFooter>\n                    </Modal>\n                </div>\n            </Fragment>\n        )\n    }\n}\n\nexport default AdminControlComponent","import React, {Fragment} from 'react'\nimport {Toast, ToastBody, ToastHeader} from \"reactstrap\";\nimport styles from \"../stylesHome.css\";\nclass LogItemComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n    }\n    getNumberFormat = (number) => {\n        return new Intl.NumberFormat('vn-IN', {}).format(number)+\" đ\"\n    };\n\n    render() {\n        let {log} = this.props;\n        return (\n            <Fragment>\n                    <Toast >\n                        <ToastHeader className={log.type===\"IN_CREATE\"?\"bg-success p-2 \":\"bg-danger p-2\"}>\n                        </ToastHeader>\n                        <ToastBody className=\"position-relative\">\n                            <div className=\"describe\">{log.caption}</div>\n                            <div className=\"money\">{log.type===\"IN_CREATE\"?\"+\":\"-\"}{this.getNumberFormat(log.money)}</div>\n                            <div className=\"deleteButton\" onClick={()=>{this.props.onDelete(log._id)}}><i className=\"fas fa-times-circle\"></i></div>\n                        </ToastBody>\n                    </Toast>\n            </Fragment>\n        )\n    }\n}\n\nexport default LogItemComponent","import React, { } from \"react\";\nimport styles from \"./stylesHome.css\";\nimport { Toast, ToastBody, ToastHeader, Container, Row, Col, Button, } from 'reactstrap';\nimport {\n    GET_LOGS_MONEY_COMPLETE,\n    GET_LOGS_MONEY_REQUEST,\n    POST_CREATE_LOG_MONEY_REQUEST,\n    POST_CREATE_LOG_MONEY_COMPLETE, DELETE_LOGS_MONEY_REQUEST, DELETE_LOGS_MONEY_COMPLETE\n} from \"../../actionTypes\";\n\nimport { connect } from \"react-redux\";\nimport {deleteLogById, getLogsMoney, postCreateLogMoney} from \"./action\"\nimport Loading from '../animations/Loading'\nimport AdminControlComponent from \"./components/AdminControlComponent\";\nimport LogItemComponent from \"./components/LogItemComponent\";\n\nclass CoffeePage extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoading: false,\n            logs: [],\n            money: 0,\n            idDelete:null,\n            typeUser:\"CLIENT\",\n        };\n    }\n\n    componentWillMount() {\n        const { dispatch } = this.props;\n        dispatch(getLogsMoney());\n    }\n    componentWillReceiveProps(nextProps) {\n        let {result} = nextProps.coffee;\n        switch (nextProps.coffee.type) {\n            case GET_LOGS_MONEY_REQUEST:\n                this.setState({ isLoading: nextProps.coffee.isFetching });\n                break;\n            case GET_LOGS_MONEY_COMPLETE:\n                if(!nextProps.login.result){\n                    this.props.history.push('/');\n                    return;\n                }\n                this.setState({\n                    isLoading: nextProps.coffee.isFetching,\n                    logs: nextProps.coffee.result.data.logs,\n                    money: nextProps.coffee.result.data.money,\n                    typeUser:nextProps.login.result.data.success.type\n                });\n                break;\n            case POST_CREATE_LOG_MONEY_REQUEST:\n                this.setState({ isLoading: nextProps.coffee.isFetching});\n                break;\n            case POST_CREATE_LOG_MONEY_COMPLETE:\n                let newLogs = this.state.logs;\n                newLogs.push(result.data.success.logs.data);\n                this.setState({\n                    isLoading: nextProps.coffee.isFetching,\n                    money:result.data.success.money,\n                    logs:newLogs\n                });\n                break;\n            case DELETE_LOGS_MONEY_COMPLETE:\n                if(result.data.success){\n                    let logs = this.state.logs;\n                    logs = logs.filter(item=>{\n                        return !(item._id === result.data.success.id)\n                    });\n                    this.setState({\n                        isLoading: nextProps.coffee.isFetching,\n                        money:result.data.success.money,\n                        logs:logs,\n                        idDelete:null\n                    });\n                }\n                else {\n                    alert(\"delete fail\");\n                }\n                break;\n            default:\n                return;\n        }\n    }\n    onCreateLogsClick = (type) =>{\n        let describe,money;\n        type = type.toUpperCase();\n        if(type === \"REDUCE\"){\n            describe = document.getElementById(\"describeSub\").value;\n            money = parseInt(document.getElementById(\"moneySub\").value);\n        }\n        if(type === \"IN_CREATE\"){\n            describe = document.getElementById(\"describeAdd\").value;\n            money = parseInt(document.getElementById(\"moneyAdd\").value);\n        }\n        const { dispatch } = this.props;\n        if (describe != null && money != null) {\n            let payload = {\n                \"caption\": describe,\n                \"money\": money,\n                \"type\": type\n            };\n            dispatch(postCreateLogMoney(payload));\n        }else{\n            alert(\"May be description or money is null\");\n        }\n    };\n    onBtnLogoutClick = () => {\n        localStorage.removeItem(\"user\");\n        this.props.history.push('/');\n    };\n    getNumberFormat = (number) => {\n        return new Intl.NumberFormat('vn-IN', {}).format(number)+\" đ\"\n    };\n    onDeleteLogClick =(id)=>{\n        this.setState({idDelete:id});\n        const { dispatch } = this.props;\n        dispatch(deleteLogById(id));\n    };\n    render() {\n        const { isLoading,logs,money,typeUser,idDelete} = this.state;\n        const adminControls = <AdminControlComponent onCreateLogsClick={this.onCreateLogsClick}/>;\n\n        return(\n            <Container>\n                <Row>\n                    <Col md={12} className=\"mt-3\" >\n                        <div className=\"float-right\">\n                            <Button onClick={this.onBtnLogoutClick}>Log out</Button>\n                        </div>\n                    </Col>\n                    <Col sm={{ size: 8, offset: 2 }} md={{ size: 6, offset: 3 }} >\n                        {/*<h1 className=\"title\">{typeUser}</h1>*/}\n                        <h2 className=\"sumMoney\">{this.getNumberFormat(money)}</h2>\n                        {\n                            isLoading ?\n                                <Loading /> :\n                                <div className=\"wrap\">\n                                    {\n                                        logs.map((item,index) => {\n                                            if(item._id === idDelete){\n                                                return <Loading/>\n                                            }\n                                            return <LogItemComponent log={item} keu={index} onDelete={this.onDeleteLogClick}/>\n                                        })\n                                    }\n                                </div>\n                        }\n                        {typeUser === 'ADMIN' ? adminControls: ''}\n                    </Col>\n                </Row>\n            </Container>\n            )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    login:{...state.login},\n    coffee: { ...state.coffee }\n});\n\nexport default connect(mapStateToProps)(CoffeePage)\n","import errors from \"./modules/errors\";\nimport Root from \"./modules/Root\";\nimport Question from \"./modules/questions\";\nimport UserPage from \"./modules/userPage\";\nimport LoginCoffee from \"./modules/coffee/login\";\nimport CoffeePage from \"./modules/coffee\";\n\n\nconst routes = [\n    {\n        component: Root,\n        routes: [\n            {\n                path: \"/\",\n                component: LoginCoffee,\n                exact: true\n            },\n            {\n                path: \"/questions\",\n                component: Question,\n                exact: true\n            },\n            {\n                path: \"/coffee\",\n                component: CoffeePage,\n                exact: true\n            },\n            {\n                path: \"/trang_chu\",\n                component: UserPage,\n                exact: true\n            },\n            {\n                path: \"*\",\n                component: errors.PageNotFound\n            }\n        ]\n    }\n];\n\nexport default routes;","import {renderRoutes} from \"react-router-config\";\nimport './App.css';\nimport routes from \"./routes\";\n\nconst App = () => {\n    return (renderRoutes(routes));\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {combineReducers} from \"redux\";\nimport homeReducer from \"./modules/home/reducers\";\nimport userReducer from \"./modules/userPage/reducer\";\nimport questionReducer from \"./modules/questions/reducer\";\nimport coffeeReducer from \"./modules/coffee/reducer\";\nimport login from \"./modules/coffee/loginReducer\";\nexport default combineReducers({\n    home: homeReducer,\n    users: userReducer,\n    question:questionReducer,\n    coffee: coffeeReducer,\n    login:login\n});\n","import {HOME_COMPLETE, HOME_REQUEST} from \"../../actionTypes\";\n\nexport default (state = {}, action) => {\n    switch (action.type) {\n        case HOME_REQUEST:\n            return {\n                ...state,\n                type: action.type,\n                isFetching: true\n            };\n        case HOME_COMPLETE:\n            return {\n                ...state,\n                type: action.type,\n                isFetching: false,\n                result: action.payload,\n                error: action.error\n            };\n        default:\n            return state;\n    }\n}","import {GET_USER_COMPLETE, GET_USER_REQUEST} from \"../../actionTypes\";\n\nexport default (state = {}, action) => {\n    switch (action.type) {\n        case GET_USER_COMPLETE:\n            return {\n                ...state,\n                type: action.type,\n                isFetching: false,\n                result: action.payload,\n                error: action.error\n            };\n        default:\n            return state;\n    }\n}","import {\n    GET_QUESTION_BY_ID_COMPLETE,\n    GET_QUESTION_BY_ID_REQUEST,\n    POST_CREATE_QUESTION_COMPLETE,\n    POST_CREATE_QUESTION_REQUEST\n} from \"../../actionTypes\";\n\nexport default (state = {}, action) => {\n    switch (action.type) {\n        case GET_QUESTION_BY_ID_REQUEST:\n            return {\n                ...state,\n                type: action.type,\n                isFetching: action.isFetching,\n                result: action.payload,\n                error: action.error\n            };\n        case POST_CREATE_QUESTION_REQUEST:\n            return {\n                ...state,\n                type: action.type,\n                isFetching: action.isFetching,\n                result: action.payload,\n                error: action.error\n            };\n        case GET_QUESTION_BY_ID_COMPLETE:\n            return {\n                ...state,\n                type: action.type,\n                isFetching: action.isFetching,\n                result: action.payload,\n                error: action.error\n            };\n        case POST_CREATE_QUESTION_COMPLETE:\n            return {\n                ...state,\n                type: action.type,\n                isFetching: action.isFetching,\n                result: action.payload,\n                error: action.error\n            };\n        default:\n            return state;\n    }\n}","import {\n    DELETE_LOGS_MONEY_COMPLETE,\n    DELETE_LOGS_MONEY_REQUEST,\n    GET_LOGS_MONEY_COMPLETE,\n    GET_LOGS_MONEY_REQUEST,\n    POST_CREATE_LOG_MONEY_COMPLETE,\n    POST_CREATE_LOG_MONEY_REQUEST\n} from \"../../actionTypes\";\n\nexport default (state = {}, action) => {\n    switch (action.type) {\n        case GET_LOGS_MONEY_REQUEST:\n            return {\n                ...state,\n                type: action.type,\n                isFetching: action.isFetching,\n                result: action.payload,\n                error: action.error\n            };\n        case GET_LOGS_MONEY_COMPLETE:\n            return {\n                ...state,\n                type: action.type,\n                isFetching: action.isFetching,\n                result: action.payload,\n                error: action.error\n            };\n        case POST_CREATE_LOG_MONEY_REQUEST:\n            return {\n                ...state,\n                type: action.type,\n                isFetching: action.isFetching,\n                result: action.payload,\n                error: action.error\n            };\n        case POST_CREATE_LOG_MONEY_COMPLETE:\n            return {\n                ...state,\n                type: action.type,\n                isFetching: action.isFetching,\n                result: action.payload,\n                error: action.error\n            };\n        case DELETE_LOGS_MONEY_REQUEST:\n            return {\n                ...state,\n                type: action.type,\n                isFetching: action.isFetching,\n                result: action.payload,\n                error: action.error\n            };\n        case DELETE_LOGS_MONEY_COMPLETE:\n            return {\n                ...state,\n                type: action.type,\n                isFetching: action.isFetching,\n                result: action.payload,\n                error: action.error\n            };\n\n        default:\n            return state;\n    }\n}\n","import {POST_LOGIN_COMPLETE, POST_LOGIN_REQUEST} from \"../../actionTypes\";\n\nexport default (state = {}, action) => {\n    switch (action.type) {\n        case POST_LOGIN_REQUEST:\n            return {\n                ...state,\n                type: action.type,\n                isFetching: action.isFetching,\n                result: action.payload,\n                error: action.error\n            };\n        case POST_LOGIN_COMPLETE:\n            return {\n                ...state,\n                type: action.type,\n                isFetching: action.isFetching,\n                result: action.payload,\n                error: action.error\n            };\n        default:\n            return state;\n    }\n}\n","import {createStore, applyMiddleware} from \"redux\"\nimport thunk from \"redux-thunk\";\nimport logger from \"redux-logger\";\nimport rootReducer from \"./reducers\"\n\nconst loggerMiddleware = store => next => action =>{\n    console.log(\"Middleware\");\n    next(action);\n};\n\nconst configureStore = (initialState = {}) => (\n    createStore(rootReducer, initialState, applyMiddleware(thunk, logger,loggerMiddleware))\n);\n\nexport default configureStore;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from \"react-router-dom\";\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\"\nimport configureStore from \"./store\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={configureStore()}>\n            <App/>\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"PageNotFound_title__3LgjU\",\"message\":\"PageNotFound_message__2OjJE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ldsEllipsis\":\"Loading_ldsEllipsis__24DMW\",\"ldsEllipsis1\":\"Loading_ldsEllipsis1__3qOno\",\"ldsEllipsis2\":\"Loading_ldsEllipsis2__20QeU\",\"ldsEllipsis3\":\"Loading_ldsEllipsis3__1N2wm\"};"],"sourceRoot":""}